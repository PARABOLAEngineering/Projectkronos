use std::fs::File;
use std::io::{Read, Write};

const POSITION_SCALE: f64 = 60000.0;  // Gives us sub-arcsecond precision
const SPEED_SCALE: f64 = 10000.0;     // Scaled for max speed of each body

const MAX_SPEEDS: [f64; 17] = [
    1.0,    // Sun
    13.5,   // Moon
    2.2,    // Mercury
    1.3,    // Venus
    0.8,    // Mars
    0.2,    // Jupiter
    0.14,   // Saturn
    0.07,   // Uranus
    0.04,   // Neptune
    0.03,   // Pluto
    0.06,   // Chiron
    0.053,  // True Node
    0.111,  // Mean Apogee
    0.27,   // Vesta
    0.24,   // Juno
    0.21,   // Ceres
    0.25,   // Pallas
];

fn main() -> Result<(), Box<dyn std::error::Error>> {
    let args: Vec<String> = std::env::args().collect();
    if args.len() != 2 {
        println!("Usage: {} <hourly_kernel>", args[0]);
        return Ok(());
    }

    println!("ðŸŒŸ Reading kernel...");
    let mut file = File::open(&args[1])?;

    // First get size info
    let metadata = std::fs::metadata(&args[1])?;
    let file_size = metadata.len() as usize;
    let num_bodies = (file_size - 8) / 8;
    println!("File size: {} bytes, {} bodies", file_size, num_bodies);

    // Read base JD
    let mut jd_bytes = [0u8; 8];
    file.read_exact(&mut jd_bytes)?;
    let base_jd = f64::from_le_bytes(jd_bytes);
    println!("Base JD: {}", base_jd);

    // Read all positions first
    let mut positions = Vec::with_capacity(num_bodies);
    for i in 0..num_bodies {
        let mut pos_bytes = [0u8; 8];
        file.read_exact(&mut pos_bytes)?;
        let position = f64::from_le_bytes(pos_bytes);
        positions.push(position);
        println!("Body {}: {:.6}Â°", i, position);
    }

    // Now create the ultimate kernel file
    println!("\nâœ¨ Creating ultimate kernel...");
    let mut ultimate = File::create("zenith.ultimate")?;
    
    // Write base JD
    ultimate.write_all(&base_jd.to_le_bytes())?;

    // Pack and write each body's data
    for (i, &pos) in positions.iter().enumerate() {
        // Convert position to fixed point (0-360Â° â†’ 0-21600000)
        let pos_fixed = ((pos.rem_euclid(360.0) * POSITION_SCALE) as u32) & 0x00FFFFFF;
        ultimate.write_all(&pos_fixed.to_le_bytes())?;

        // For now, pack minimal speed info (we can enhance this later)
        let speed_packed = 0u16; // Placeholder
        ultimate.write_all(&speed_packed.to_le_bytes())?;
    }

    let ultimate_size = std::fs::metadata("zenith.ultimate")?.len();
    println!("Ultimate kernel written: {} bytes", ultimate_size);
    println!("Compression ratio: {:.1}%", (ultimate_size as f64 / file_size as f64) * 100.0);

    Ok(())
}